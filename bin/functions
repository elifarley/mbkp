db_dump () {
  # db_dump dump_name
  local dump_name="$1"; shift
  mysqldump "$@" -h "$DB_HOST" -u "$DB_USER" --password="$DB_PASSWORD" "$DB_NAME" > "$_module_cache/$dump_name.sql" || exit $?
}

dupl() {
  PASSPHRASE=$PASSPHRASE duplicity -v4 \
  --archive-dir="$MBKP_ARCHIVE" \
  --name "$module" "$@"
}

do_backup() {
  # do_backup src target

  dupl cleanup "$2"
  dupl remove-older-than 6M "$2"

  # FTP_PASSWORD=$FTP_PASSWORD
  dupl ${VOLSIZE:+--volsize="$VOLSIZE"} \
  --ssh-askpass --exclude-other-filesystems \
  $SSH_OPTS \
  --full-if-older-than $full_if_older_than \
  $includes $excludes \
  $extra "$1/" "$2" || FAILED="$module"
}

init_dir() {
  local priv_dir="$(dirname $1)"
  MBKP_FIRST_RUN=1
  mkdir -p "$priv_dir" || exit $?
  cp -av $BASEDIR/../priv.template/* "$priv_dir"/ || exit $?
  chmod -R go= "$priv_dir" || exit $?
}

init() {

  . "$BASEDIR/../mbackup-config.sh" || exit 1
  ((VERBOSE)) && echo "mbackup-config.sh called."

  [ -s "$MBKP_CONFIG/mbackup-config.sh" ] && {
    . "$MBKP_CONFIG/mbackup-config.sh" || exit 1
    ((VERBOSE)) && echo "$MBKP_CONFIG/mbackup-config.sh called."
  }

  local mbkp_priv_hook="$MBKP_CONFIG/priv/_mbackup.priv"
  if [ -f "$mbkp_priv_hook" ]; then
    . "$mbkp_priv_hook" || exit 1
    ((VERBOSE)) && echo "$mbkp_priv_hook called."
  else
    init_dir "$mbkp_priv_hook"
  fi

  ((MBKP_FIRST_RUN)) && {
    echo "Please edit the file '$mbkp_priv_hook' and try again."
    exit 1
  }

  [ -d "$MBKP_MODULE_CACHE" ] || {
    mkdir -p "$MBKP_MODULE_CACHE" || {
      echo "Unable to create module cache at '$MBKP_MODULE_CACHE'."
      exit 2
    }
  }

  [ -d "$MBKP_LOCAL_DATA" ] || {
    mkdir -p "$MBKP_LOCAL_DATA" || {
      echo "Unable to create local data dir at '$MBKP_LOCAL_DATA'."
      exit 3
    }
  }

}

init_module() {
  FAILED=''

  # Variables that can be overriden on module config files
  _module_cache="$MBKP_MODULE_CACHE/$module"
  mbkp_src="$_module_cache"
  mbkp_target="$MBKP_BASE_TARGET"
  VOLSIZE="50"
  full_if_older_than="6M"
  extra=''

  local priv_hook="$MBKP_CONFIG/priv/$module.priv"
  [ -f "$priv_hook" ] && {
    . "$priv_hook"
    ((VERBOSE)) && echo "$priv_hook called."
  }

  mbkp_full_target="$mbkp_target/$module"
  resolved_src="$(readlink $mbkp_src)" && mbkp_src="$resolved_src"

  [ -e "$_module_cache" ] || {
    mkdir "$_module_cache" || exit $?
  }

}

pre_module_backup() {

  local pre_hook="$MBKP_CONFIG/modules/$module.pre"
  if [ -s "$pre_hook" ]; then
    time . $pre_hook "$_module_cache" || exit $?
    ((VERBOSE)) && echo "$pre_hook called."
  else
    echo "### $pre_hook NOT CALLED."
  fi

  echo "Volume size: $VOLSIZE MB"
  echo "Module source at $mbkp_src"
  echo "Module target at $mbkp_full_target"
  echo "full_if_older_than: $full_if_older_than"
  echo "extra: $extra"

  includes="$MBKP_CONFIG/modules/$module.files"
  [ -s "$includes" ] && {
    includes="--include-globbing-filelist $includes"
  } || includes=''

  excludes="$MBKP_CONFIG/modules/$module.excludes"
  [ -s "$excludes" ] && {
    excludes="--exclude-globbing-filelist $excludes"
  } || excludes=''

} # pre_module_backup

post_module_backup() {

  local post_hook="$MBKP_CONFIG/modules/$module.post"
  if [ -s "$post_hook" ]; then
   . $post_hook "$_module_cache" || FAILED="$post_hook"
    ((VERBOSE)) && echo "$post_hook called."
  else
    echo "### $post_hook NOT CALLED."
  fi

} # post_module_backup
