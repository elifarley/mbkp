EXP_backup_modules() {
  init
  local failed_modules=''
  for module in "$@"; do
    backup_single_module "$module"
    [ -z "$FAILED" ] || failed_modules="$failed_modules $FAILED"
  done

  [ -z "$failed_modules" ] || {
    echo "#################################################################"
    echo "############################# FAILED MODULES: '$failed_modules' !"
    echo "#################################################################"
    exit 1
  }

}

add_prefix() {
  set -f
  local prefix="$1"; shift
  local join_prefix_and_item="$1"; shift
  local result_var="$1"; shift
  # Test if $result_var should be used as a source of values
  (($#)) && local items="$@" || local items="${!result_var}"

  local result=()
  for item in ${items//,/ }; do
    item=$(echo $item) # trim whitespaces
    [ -n "$item" ] && {
	  (($join_prefix_and_item)) && result+=("$prefix$item") || result+=("$prefix" "$item")
	}
  done;
  eval "$result_var=(${result[@]})"
  set +f
}

mysql_dump() {
  echo "START mysql_dump"
  echo "Host    : $DB_HOST"
  echo "Database: $DB_NAME"

  local dump_name="${1:-$DB_NAME.$module}"; shift

  add_prefix "--ignore-table=$DB_NAME." 1 _excluded_tables $excluded_tables

  [ -n "$included_tables" ] && echo 'Included tables:' && echo $included_tables
  ((${#_excluded_tables[@]})) && echo "${#_excluded_tables[@]} excluded tables:" && echo $excluded_tables
  [ -n "$db_extra" ] && echo "db_extra: $db_extra"
  echo "other   : $@"

  mysqldump -h "$DB_HOST" -u "$DB_USER" --password="$DB_PASSWORD" "$@" $db_extra "${_excluded_tables[@]}" "$DB_NAME" ${included_tables//,/ } > "$_module_cache/$dump_name.sql" || exit $?

  echo "END   mysql_dump"

}

backup_single_module() {

  module="$1"; shift

  echo "=================================================="
  echo "Backup STARTED for module $module"
  echo "=================================================="

  init_module
  pre_module_backup
  do_backup "$mbkp_src" "$mbkp_full_target"
  post_module_backup

  [ -z "$FAILED" ] || {
    echo "##################################################"
    echo "############################# FAILED '$FAILED' !"
    echo "##################################################"
  }

}

dupl() {
  PASSPHRASE="$PASSPHRASE" FTP_PASSWORD="$FTP_PASSWORD" duplicity -v4 \
  --gpg-options "--compress-algo=bzip2 --bzip2-compress-level=9" \
  --archive-dir="$MBKP_ARCHIVE" \
  --name "$module" "$@"
}

do_backup() {
  # do_backup src target

  local backup_src="$1"; shift
  local backup_target="$1"; shift
  
  dupl remove-all-but-n-full "$keep_last_n_backups" --force "$backup_target"
  dupl cleanup --force "$backup_target" # --extra-clean

  dupl --ssh-askpass $SSH_OPTS --asynchronous-upload ${volsize:+--volsize="$volsize"} \
  --full-if-older-than $full_if_older_than "${file_selection[@]}" \
  $extra "$backup_src" "$backup_target" || FAILED="$module"
}

init_dir() {
  local priv_dir="$(dirname $1)"
  echo "init_dir: $priv_dir"
  MBKP_FIRST_RUN=1
  mkdir -p "$priv_dir" || exit $?
  cp -av $CMD_BASE/../priv.template/* "$priv_dir"/ || exit $?
  chmod -R go= "$priv_dir" || exit $?

  local modules_dir="$(dirname $priv_dir)"
  echo "init_dir: $modules_dir"
  mkdir -p "$modules_dir" || exit $?
  cp -av $CMD_BASE/../modules.template/* "$modules_dir"/ || exit $?
}

init() {

  local mbkp_conf_file="$CMD_BASE/../mbkp.conf"
  ((VERBOSE)) && echo "Calling $mbkp_conf_file"
  . "$mbkp_conf_file" || exit 1

  mbkp_conf_file="$MBKP_CONFIG/mbkp.conf"
  [ -s "$mbkp_conf_file" ] && {
    ((VERBOSE)) && echo "Calling $mbkp_conf_file"
    . "$mbkp_conf_file" || exit 1
  }

  local mbkp_priv_hook="$MBKP_CONFIG/priv/mbkp-priv.conf"
  if [ -f "$mbkp_priv_hook" ]; then
    ((VERBOSE)) && echo "Calling $mbkp_priv_hook"
    . "$mbkp_priv_hook" || exit 1
  else
    init_dir "$mbkp_priv_hook"
  fi

  ((MBKP_FIRST_RUN)) && {
    echo "Please edit the file '$mbkp_priv_hook' and try again."
    exit 1
  }

  [ -d "$MBKP_MODULE_CACHE" ] || {
    mkdir -p "$MBKP_MODULE_CACHE" || {
      echo "Unable to create module cache at '$MBKP_MODULE_CACHE'."
      exit 2
    }
  }

  [ -d "$MBKP_LOCAL_DATA" ] || {
    mkdir -p "$MBKP_LOCAL_DATA" || {
      echo "Unable to create local data dir at '$MBKP_LOCAL_DATA'."
      exit 3
    }
  }

}

init_module() {
  FAILED=''

  # Variables that can be overriden on module config files
  _module_cache="$MBKP_MODULE_CACHE/$module"
  mbkp_src="$_module_cache"
  mbkp_target="$MBKP_BASE_TARGET"
  volsize="50"
  full_if_older_than="6M"
  keep_last_n_backups=3
  canonicalize_source=0
  excludes_first=0
  included_files=()
  excluded_files=()
  extra=''
  DB_HOST='localhost'
  DB_NAME=''
  DB_USER='mbkp'
  DB_PASSWORD=''
  included_tables=''
  excluded_tables=''
  db_extra=''

  local module_hook="$MBKP_CONFIG/priv/$module.conf"
  [ -f "$module_hook" ] && {
    echo "Calling: $module_hook"
    . "$module_hook"
  }

  module_hook="$MBKP_CONFIG/modules/$module.conf"
  [ -f "$module_hook" ] && {
    echo "Calling: $module_hook"
    . "$module_hook"
  }

  ((canonicalize_source)) && mbkp_src="$(readlink --canonicalize-missing $mbkp_src)"
  # Append '/' if needed
  [[ $mbkp_src == */ ]] || mbkp_src="$mbkp_src/"

  mbkp_full_target="$mbkp_target/$module"

  [ -e "$_module_cache" ] || {
    ((VERBOSE)) && echo "Creating $_module_cache"
    mkdir "$_module_cache" || exit $?
  }

  add_prefix "$mbkp_src" 1 included_files
  add_prefix "--include" 0 included_files "${included_files[@]}"

  add_prefix "$mbkp_src" 1 excluded_files
  add_prefix "--exclude" 0 excluded_files "${excluded_files[@]}"

  include_gfilelist="$MBKP_CONFIG/modules/$module.files"
  [ -s "$include_gfilelist" ] && {
    include_gfilelist="--include-globbing-filelist $include_gfilelist"
  } || include_gfilelist=''

  exclude_gfilelist="$MBKP_CONFIG/modules/$module.excludes"
  [ -s "$exclude_gfilelist" ] && {
    exclude_gfilelist="--exclude-globbing-filelist $exclude_gfilelist"
  } || exclude_gfilelist=''

  file_selection=(--exclude-if-present CACHEDIR.TAG --exclude-other-filesystems)
  ((excludes_first)) && file_selection+=("${excluded_files[@]}" "${included_files[@]}") || file_selection+=("${included_files[@]}" "${excluded_files[@]}")
  file_selection+=($include_gfilelist $exclude_gfilelist)

  set -f
  echo "Module source: $mbkp_src"
  echo "Module target: $mbkp_full_target"
  echo "Volume size  : $volsize MB"
  echo "Full if older: $full_if_older_than"
  echo "Keep last backups: $keep_last_n_backups"
  [ -n "$extra" ] && echo "extra        : $extra"
  ((${#included_files[@]})) && echo "Included files:" && echo ${included_files[@]}
  ((${#excluded_files[@]})) && echo "Excluded files:" && echo ${excluded_files[@]}
  [ -n "$include_gfilelist" ] && echo $include_gfilelist
  [ -n "$exclude_gfilelist" ] && echo $exclude_gfilelist
  set +f
  echo '------------------------------------'

}

pre_module_backup() {

  local pre_hook="$MBKP_CONFIG/modules/$module.pre"
  if [ -s "$pre_hook" ]; then
    echo "Calling: $pre_hook"
    . $pre_hook "$_module_cache" || exit $?
  else
    ((VERBOSE)) && echo "### NOT CALLED: $pre_hook"
  fi

  [ -n "$DB_NAME" ] && time mysql_dump

} # pre_module_backup

post_module_backup() {

  local post_hook="$MBKP_CONFIG/modules/$module.post"
  if [ -s "$post_hook" ]; then
    echo "Calling: $post_hook"
   . $post_hook "$_module_cache" || FAILED="$post_hook"
  else
    ((VERBOSE)) && echo "### $post_hook NOT CALLED."
  fi

} # post_module_backup
