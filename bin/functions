EXP_backup_modules() {
  init
  local failed_modules=''
  for module in "$@"; do
    backup_single_module "$module"
    [ -z "$FAILED" ] || failed_modules="$failed_modules $FAILED"
  done

  [ -z "$failed_modules" ] || {
    echo "#################################################################"
    echo "############################# FAILED MODULES: '$failed_modules' !"
    echo "#################################################################"
    exit 1
  }

}

mysql_dump () {
  echo "START mysql_dump"
  echo "Host    : $DB_HOST"
  echo "Database: $DB_NAME"

  local dump_name="${1:-$DB_NAME}"; shift

  local _included_tables=''
  for table in "${included_tables//,/ }"; do
    table=$(echo $table) # trim whitespaces
    [ -n "$table" ] && _included_tables="$_included_tables --ignore-table='$DB_NAME.$table'"
  done;
  local _excluded_tables=''
  for table in ${excluded_tables//,/ }; do
    table=$(echo $table) # trim whitespaces
    [ -n "$table" ] && _excluded_tables="$_excluded_tables --ignore-table='$DB_NAME.$table'"
  done;

  [ -n "$included_tables" ] && echo "Included: $included_tables"
  [ -n "$excluded_tables" ] && echo "Excluded: $excluded_tables"
  [ -n "$db_extra" ] && echo "db_extra: $db_extra"
  echo "other   : $@"

  mysqldump "$@" $_included_tables $_excluded_tables $db_extra -h "$DB_HOST" -u "$DB_USER" --password="$DB_PASSWORD" "$DB_NAME" > "$_module_cache/$dump_name.sql" || exit $?

  echo "END   mysql_dump"

}

backup_single_module() {

  module="$1"; shift

  echo "=================================================="
  echo "Backup STARTED for module $module"
  echo "=================================================="

  init_module
  pre_module_backup
  do_backup "$mbkp_src" "$mbkp_full_target"
  post_module_backup

  [ -z "$FAILED" ] || {
    echo "##################################################"
    echo "############################# FAILED '$FAILED' !"
    echo "##################################################"
  }

}

dupl() {
  PASSPHRASE="$PASSPHRASE" FTP_PASSWORD="$FTP_PASSWORD" duplicity -v4 \
  --gpg-options "--compress-algo=bzip2 --bzip2-compress-level=9" \
  --archive-dir="$MBKP_ARCHIVE" \
  --name "$module" "$@"
}

do_backup() {
  # do_backup src target

  local backup_src="$1"; shift
  local backup_target="$1"; shift
  # Append '/' if needed
  [[ "$(echo $backup_src | awk '$0=$NF' FS=)" == "/" ]] || backup_src="$backup_src/"
  
  dupl cleanup --force "$backup_target" # --extra-clean
  dupl remove-all-but-n-full "$keep_last_n_backups" --force "$backup_target"

  dupl --ssh-askpass --exclude-if-present CACHEDIR.TAG --exclude-other-filesystems \
  --asynchronous-upload \
  ${volsize:+--volsize="$volsize"} $SSH_OPTS \
  --full-if-older-than $full_if_older_than \
  $includes $excludes \
  $extra "$backup_src" "$backup_target" || FAILED="$module"
}

init_dir() {
  local priv_dir="$(dirname $1)"
  echo "init_dir: $priv_dir"
  MBKP_FIRST_RUN=1
  mkdir -p "$priv_dir" || exit $?
  cp -av $CMD_BASE/../priv.template/* "$priv_dir"/ || exit $?
  chmod -R go= "$priv_dir" || exit $?
}

init() {

  ((VERBOSE)) && echo "Calling mbackup-config.sh"
  . "$CMD_BASE/../mbackup-config.sh" || exit 1

  [ -s "$MBKP_CONFIG/mbackup-config.sh" ] && {
    ((VERBOSE)) && echo "Calling $MBKP_CONFIG/mbackup-config.sh"
    . "$MBKP_CONFIG/mbackup-config.sh" || exit 1
  }

  local mbkp_priv_hook="$MBKP_CONFIG/priv/_mbackup.conf"
  if [ -f "$mbkp_priv_hook" ]; then
    ((VERBOSE)) && echo "Calling $mbkp_priv_hook"
    . "$mbkp_priv_hook" || exit 1
  else
    init_dir "$mbkp_priv_hook"
  fi

  ((MBKP_FIRST_RUN)) && {
    echo "Please edit the file '$mbkp_priv_hook' and try again."
    exit 1
  }

  [ -d "$MBKP_MODULE_CACHE" ] || {
    mkdir -p "$MBKP_MODULE_CACHE" || {
      echo "Unable to create module cache at '$MBKP_MODULE_CACHE'."
      exit 2
    }
  }

  [ -d "$MBKP_LOCAL_DATA" ] || {
    mkdir -p "$MBKP_LOCAL_DATA" || {
      echo "Unable to create local data dir at '$MBKP_LOCAL_DATA'."
      exit 3
    }
  }

}

init_module() {
  FAILED=''

  # Variables that can be overriden on module config files
  _module_cache="$MBKP_MODULE_CACHE/$module"
  mbkp_src="$_module_cache"
  mbkp_target="$MBKP_BASE_TARGET"
  volsize="50"
  full_if_older_than="6M"
  keep_last_n_backups=3
  extra=''
  DB_HOST='localhost'
  DB_NAME=''
  DB_USER='mbkp'
  DB_PASSWORD=''
  included_tables=''
  excluded_tables=''
  db_extra=''

  local module_hook="$MBKP_CONFIG/priv/$module.conf"
  [ -f "$module_hook" ] && {
    echo "Calling: $module_hook"
    . "$module_hook"
  }

  module_hook="$MBKP_CONFIG/modules/$module.conf"
  [ -f "$module_hook" ] && {
    echo "Calling: $module_hook"
    . "$module_hook"
  }

  mbkp_full_target="$mbkp_target/$module"
  resolved_src="$(readlink $mbkp_src)" && mbkp_src="$resolved_src"

  [ -e "$_module_cache" ] || {
    ((VERBOSE)) && echo "Creating $_module_cache"
    mkdir "$_module_cache" || exit $?
  }

  includes="$MBKP_CONFIG/modules/$module.files"
  [ -s "$includes" ] && {
    includes="--include-globbing-filelist $includes"
    echo $includes
  } || includes=''

  excludes="$MBKP_CONFIG/modules/$module.excludes"
  [ -s "$excludes" ] && {
    excludes="--exclude-globbing-filelist $excludes"
    echo $excludes
  } || excludes=''

  echo "Module source: $mbkp_src"
  echo "Module target: $mbkp_full_target"
  echo "Volume size  : $volsize MB"
  echo "Full if older: $full_if_older_than"
  echo "Keep last backups: $keep_last_n_backups"
  [ -n "$extra" ] && echo "extra        : $extra"
  echo '------------------------------------'

}

pre_module_backup() {

  local pre_hook="$MBKP_CONFIG/modules/$module.pre"
  if [ -s "$pre_hook" ]; then
    echo "Calling: $pre_hook"
    time . $pre_hook "$_module_cache" || exit $?
  else
    ((VERBOSE)) && echo "### NOT CALLED: $pre_hook"
  fi

  [ -n "$DB_NAME" ] && mysql_dump

} # pre_module_backup

post_module_backup() {

  local post_hook="$MBKP_CONFIG/modules/$module.post"
  if [ -s "$post_hook" ]; then
    echo "Calling: $post_hook"
   . $post_hook "$_module_cache" || FAILED="$post_hook"
  else
    ((VERBOSE)) && echo "### $post_hook NOT CALLED."
  fi

} # post_module_backup
